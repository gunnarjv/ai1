{"ts":1360470601338,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1360470607670,"patch":[[{"diffs":[[1,"Point2D.java\n\n\nBelow is the syntax highlighted version of Point2D.java from ยง Algorithms.\n\n\n/*************************************************************************\n *  Compilation:  javac Point2D.java\n *  http://algs4.cs.princeton.edu/12oop/Point2D.java.html\n *  Immutable point data type for points in the plane.\n *\n *************************************************************************/\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic class Point2D{\n\n    private final double x;    // x coordinate\n    private final double y;    // y coordinate\n\n    // create a new point (x, y)\n    public Point2D(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    // return the x-coorindate of this point\n    public double x() { return x; }\n\n    // return the y-coorindate of this point\n    public double y() { return y; }\n\n\n\n    // does this point equal y?\n    public boolean equals(Object other) {\n        if (other == this) return true;\n        if (other == null) return false;\n        if (other.getClass() != this.getClass()) return false;\n        Point2D that = (Point2D) other;\n        return this.x == that.x && this.y == that.y;\n    }\n    }\n}"]],"start1":0,"start2":0,"length1":0,"length2":1181}]],"length":1181,"saved":false}
{"ts":1360470616799,"patch":[[{"diffs":[[0,";\n    }\n"],[-1,"    }\n"],[0,"}"]],"start1":1166,"start2":1166,"length1":15,"length2":9}]],"length":1175,"saved":false}
{"ts":1360470643908,"patch":[[{"diffs":[[-1,"Point2D.java\n\n\nBelow is the syntax highlighted version of Point2D.java from ยง Algorithms.\n\n\n/*************************************************************************\n *  Compilation:  javac Point2D.java\n *  http://algs4.cs.princeton.edu/12oop/Point2D.java.html\n *  Immutable point data type for points in the plane.\n *\n *************************************************************************/\n\n"],[0,"impo"]],"start1":0,"start2":0,"length1":401,"length2":4}]],"length":778,"saved":false}
{"ts":1360470660129,"patch":[[{"diffs":[[0,"ate "],[-1,"final double x;    // x coordinate\n    private final double y;    // y coordinate"],[1,"Point"],[0,"\n\n  "]],"start1":86,"start2":86,"length1":89,"length2":13}]],"length":702,"saved":false}
{"ts":1360470665631,"patch":[[{"diffs":[[0,"c class "],[-1,"Point2D"],[1,"Environment"],[0,"{\n\n    p"]],"start1":60,"start2":60,"length1":23,"length2":27}]],"length":706,"saved":false}
{"ts":1360470679212,"patch":[[{"diffs":[[0,"te Point"],[1,"2D;"],[0,"\n\n    //"]],"start1":91,"start2":91,"length1":16,"length2":19}]],"length":709,"saved":false}
{"ts":1360470685620,"patch":[[{"diffs":[[0,"    "],[-1,"// create a new point (x, y)\n    public Point2D(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    // return the x-coorindate of this point\n    public double x() { return x; }\n\n    // return the y-coorindate of this point\n    public double y() { return y; }\n\n\n\n    // does this point equal y?\n    public boolean equals(Object other) {\n        if (other == this) return true;\n        if (other == null) return false;\n        if (other.getClass() != this.getClass()) return false;\n        Point2D that = (Point2D) other;\n        return this.x == that.x && this.y == that.y;\n    }"],[0,"\n}"]],"start1":104,"start2":104,"length1":605,"length2":6}]],"length":110,"saved":false}
{"ts":1360470690144,"patch":[[{"diffs":[[0," Point2D"],[1," "],[0,";\n\n    \n"]],"start1":93,"start2":93,"length1":16,"length2":17}]],"length":111,"saved":false}
{"ts":1360470749974,"patch":[[{"diffs":[[0,"Point2D "],[1,"obstacles"],[0,";\n\n    \n"]],"start1":94,"start2":94,"length1":16,"length2":25}]],"length":120,"saved":false}
{"ts":1360470755553,"patch":[[{"diffs":[[0,"private "],[1,"List"],[0,"Point2D "]],"start1":86,"start2":86,"length1":16,"length2":20}]],"length":124,"saved":false}
{"ts":1360470773281,"patch":[[{"diffs":[[0,"   p"],[-1,"rivate"],[1,"ublic"],[0," Lis"]],"start1":83,"start2":83,"length1":14,"length2":13}]],"length":123,"saved":false}
{"ts":1360470777575,"patch":[[{"diffs":[[0,"lic List"],[1,"<"],[0,"Point2D "]],"start1":89,"start2":89,"length1":16,"length2":17}]],"length":124,"saved":false}
{"ts":1360470779945,"patch":[[{"diffs":[[0,"<Point2D"],[1,">"],[0," obstacl"]],"start1":97,"start2":97,"length1":16,"length2":17}]],"length":125,"saved":false}
{"ts":1360470790752,"patch":[[{"diffs":[[0,"s;\n\n    "],[1,"int "],[0,"\n}"]],"start1":115,"start2":115,"length1":10,"length2":14}]],"length":129,"saved":false}
{"ts":1360470792946,"patch":[[{"diffs":[[0,"    int "],[1,"width;"],[0,"\n}"]],"start1":119,"start2":119,"length1":10,"length2":16}]],"length":135,"saved":false}
{"ts":1360470793464,"patch":[[{"diffs":[[0,"nt width"],[-1,";"],[0,"\n}"]],"start1":124,"start2":124,"length1":11,"length2":10}]],"length":134,"saved":false}
{"ts":1360470799284,"patch":[[{"diffs":[[0,"s;\n\n    "],[1,"public "],[0,"int widt"]],"start1":115,"start2":115,"length1":16,"length2":23},{"diffs":[[0,"nt width"],[1,", h"],[0,"\n}"]],"start1":131,"start2":131,"length1":10,"length2":13}]],"length":144,"saved":false}
{"ts":1360470801271,"patch":[[{"diffs":[[0,"width, h"],[1,"eight;"],[0,"\n}"]],"start1":134,"start2":134,"length1":10,"length2":16}]],"length":150,"saved":false}
{"contributors":["gunnarjv2@gmail.com"],"silentsave":false,"ts":1360471492213,"patch":[[{"diffs":[[0,"onment{\n"],[-1,"\n"],[0,"    publ"]],"start1":73,"start2":73,"length1":17,"length2":16},{"diffs":[[0,"es;\n"],[-1,"\n    public int width, height;"],[1,"    // r is rows, c i columns\n    public int r, c;\n    \n    // Home\n    public Point2D home;\n    \n    public boolan is_home(Point2D location)\n    {\n        return home.equals(location);\n    }"],[0,"\n}"]],"start1":113,"start2":113,"length1":36,"length2":197}]],"length":310,"saved":false}
