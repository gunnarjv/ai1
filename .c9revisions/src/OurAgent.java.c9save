{"ts":1360463039267,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":["bjarnibenedikts@gmail.com"],"silentsave":false,"ts":1360463049173,"patch":[[{"diffs":[[1,"import java.util.Collection;\nimport java.util.Random;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RandomAgent implements Agent\n{\n    private Random random = new Random();\n\n\t/*\n\t\tinit(Collection<String> percepts) is called once before you have to select the first action. Use it to find a plan. Store the plan and just execute it step by step in nextAction.\n\t*/\n\n    public void init(Collection<String> percepts) {\n\t\t/*\n\t\t\tPossible percepts are:\n\t\t\t- \"(SIZE x y)\" denoting the size of the environment, where x,y are integers\n\t\t\t- \"(HOME x y)\" with x,y >= 1 denoting the initial position of the robot\n\t\t\t- \"(ORIENTATION o)\" with o in {\"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"} denoting the initial orientation of the robot\n\t\t\t- \"(AT o x y)\" with o being \"DIRT\" or \"OBSTACLE\" denoting the position of a dirt or an obstacle\n\t\t\tMoving north increases the y coordinate and moving east increases the x coordinate of the robots position.\n\t\t\tThe robot is turned off initially, so don't forget to turn it on.\n\t\t*/\n\t\tPattern perceptNamePattern = Pattern.compile(\"\\\\(\\\\s*([^\\\\s]+).*\");\n\t\tfor (String percept:percepts) {\n\t\t\tMatcher perceptNameMatcher = perceptNamePattern.matcher(percept);\n\t\t\tif (perceptNameMatcher.matches()) {\n\t\t\t\tString perceptName = perceptNameMatcher.group(1);\n\t\t\t\tif (perceptName.equals(\"HOME\")) {\n\t\t\t\t\tMatcher m = Pattern.compile(\"\\\\(\\\\s*HOME\\\\s+([0-9]+)\\\\s+([0-9]+)\\\\s*\\\\)\").matcher(percept);\n\t\t\t\t\tif (m.matches()) {\n\t\t\t\t\t\tSystem.out.println(\"robot is at \" + m.group(1) + \",\" + m.group(2));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"other percept:\" + percept);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.err.println(\"strange percept that does not match pattern: \" + percept);\n\t\t\t}\n\t\t}\n    }\n\n    public String nextAction(Collection<String> percepts) {\n\t\tSystem.out.print(\"perceiving:\");\n\t\tfor(String percept:percepts) {\n\t\t\tSystem.out.print(\"'\" + percept + \"', \");\n\t\t}\n\t\tSystem.out.println(\"\");\n\t\tString[] actions = { \"TURN_ON\", \"TURN_OFF\", \"TURN_RIGHT\", \"TURN_LEFT\", \"GO\", \"SUCK\" };\n\t\treturn actions[random.nextInt(actions.length)];\n\t}\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":2065}]],"length":2065,"saved":false}
{"contributors":["bjarnibenedikts@gmail.com","gunnarjv2@gmail.com"],"silentsave":false,"ts":1360463669987,"patch":[[{"diffs":[[0,"c class "],[-1,"Random"],[1,"Our"],[0,"Agent im"]],"start1":124,"start2":124,"length1":22,"length2":19}]],"length":2062,"saved":false}
